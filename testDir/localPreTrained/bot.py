import logging
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from chroma_utils import search_service
import httpx


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("ADMIN_CHAT_ID")
DEEPSEEK_API_URL = os.getenv("DEEPSEEK_API_URL")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

DEEPSEEK_SYSTEM_PROMPT = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞. –û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, —Å —É—á—ë—Ç–æ–º –∑–∞–¥–∞—á –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–º–æ–Ω—Ç—É, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∞–≤—Ç–æ.
"""
OLLAMA_SYSTEM_PROMPT = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞. –û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, —Å —É—á—ë—Ç–æ–º –∑–∞–¥–∞—á –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ä–µ–º–æ–Ω—Ç—É, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∞–≤—Ç–æ.
"""

# FSM
class SignupForm(StatesGroup):
    name = State()
    phone = State()
    car = State()
    issue = State()
    number = State()
    time = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —É—Å–ª—É–≥–∞–º")],
    [KeyboardButton(text="üìù –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å")],
    [KeyboardButton(text="ü§ñ Agent")],
    [KeyboardButton(text="ü§ñ llama Agent")],
], resize_keyboard=True)

# /start
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.update_data(mode="agent")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å-–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –†–µ–∂–∏–º—ã
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —É—Å–ª—É–≥–∞–º")
async def mode_chroma(message: Message, state: FSMContext):
    await state.update_data(mode="chromadb")
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ —É—Å–ª—É–≥:")

@dp.message(F.text == "ü§ñ Agent")
async def mode_deepseek(message: Message, state: FSMContext):
    await state.update_data(mode="agent")
    await message.answer("ü§ñ –†–µ–∂–∏–º DeepSeek –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")

@dp.message(F.text == "ü§ñ llama Agent")
async def mode_ollama(message: Message, state: FSMContext):
    await state.update_data(mode="localagent")
    await message.answer("ü§ñ –†–µ–∂–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ (Ollama) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å.")

@dp.message(F.text == "üìù –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å")
async def signup_start(message: Message, state: FSMContext):
    await state.update_data(mode="signup")
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b> –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    await state.set_state(SignupForm.name)

# FSM-–ø–æ—Ç–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(SignupForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(SignupForm.phone)

@dp.message(SignupForm.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üöó –ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã:")
    await state.set_state(SignupForm.car)

@dp.message(SignupForm.car)
async def get_car(message: Message, state: FSMContext):
    await state.update_data(car=message.text)
    await message.answer("‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(SignupForm.issue)

@dp.message(SignupForm.issue)
async def get_issue(message: Message, state: FSMContext):
    await state.update_data(issue=message.text)
    await message.answer("üìûüöó–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã")
    await state.set_state(SignupForm.number)

@dp.message(SignupForm.number)
async def get_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer("üïí –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:")
    await state.set_state(SignupForm.time)

@dp.message(SignupForm.time)
async def finish_signup(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    data = await state.get_data()
    request_text = (
        "üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üöó –ú–∞—à–∏–Ω–∞: {data['car']}\n"
        f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['issue']}\n"
        f"üìûüöó –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: {data['number']}\n"
        f"üïí –í—Ä–µ–º—è: {data['time']}"
    )
    await bot.send_message(chat_id=TELEGRAM_CHANNEL_ID, text=request_text)
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!", reply_markup=main_menu)
    await state.clear()
    await state.update_data(mode="agent")

# --- –ó–∞–ø—Ä–æ—Å –∫ DeepSeek
async def ask_deepseek(user_input: str) -> str:
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system", "content": DEEPSEEK_SYSTEM_PROMPT},
            {"role": "user", "content": user_input}
        ],
        "temperature": 0.7
    }

    async with httpx.AsyncClient(timeout=30) as client:
        response = await client.post(DEEPSEEK_API_URL, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]

# --- –ó–∞–ø—Ä–æ—Å –∫ Ollama
async def ask_ollama(user_input: str) -> str:
    url = f"{OLLAMA_BASE_URL}/api/chat"
    payload = {
        "model": "deepseek-r1:latest",
        "messages": [
            {"role": "system", "content": OLLAMA_SYSTEM_PROMPT},
            {"role": "user", "content": user_input}
        ]
    }

    async with httpx.AsyncClient(timeout=30) as client:
        response = await client.post(url, json=payload)
        response.raise_for_status()
        return response.json()["message"]["content"]

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message(F.text & ~F.text.startswith("/"))
async def handle_input(message: Message, state: FSMContext):
    data = await state.get_data()
    mode = data.get("mode", "agent")

    if mode == "chromadb":
        await message.answer("üîé –ü–æ–∏—Å–∫ –ø–æ —É—Å–ª—É–≥–∞–º...")
        result = search_service(message.text)
        await message.answer(result)
    elif mode == "agent":
        await message.answer("ü§ñ –î—É–º–∞—é...")
        try:
            reply = await ask_deepseek(message.text)
            await message.answer(reply)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ DeepSeek: {e}")
    elif mode == "localagent":
        await message.answer("ü§ñ –î—É–º–∞—é (–ª–æ–∫–∞–ª—å–Ω–æ)...")
        try:
            reply = await ask_ollama(message.text)
            await message.answer(reply)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Ollama: {e}")
    else:
        await message.answer("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))