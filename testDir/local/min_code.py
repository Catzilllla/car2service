import os
import pandas as pd
import torch
from sentence_transformers import SentenceTransformer, util
from datetime import datetime
from colorama import init, Fore, Style

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama ---
init(autoreset=True)

# --- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ---
device = "cpu"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
print(Fore.CYAN + "üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å SentenceTransformer...")
model = SentenceTransformer("paraphrase-MiniLM-L3-v2")  # –±–æ–ª–µ–µ –ª—ë–≥–∫–∞—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
print(Fore.GREEN + "‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
df = pd.read_csv("rag_services.csv")
services = df["–£—Å–ª—É–≥–∞"].tolist()

# --- –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ---
embedding_cache_path = "service_embeddings.pt"
if os.path.exists(embedding_cache_path):
    print(Fore.YELLOW + "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ –∫–µ—à–∞...")
    service_embeddings = torch.load(embedding_cache_path)
else:
    print(Fore.CYAN + "üîß –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–Ω–æ–≤–æ...")
    service_embeddings = model.encode(services, convert_to_tensor=True)
    torch.save(service_embeddings, embedding_cache_path)
print(Fore.GREEN + f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –£—Å–ª—É–≥: {len(services)}")

# --- –ü–æ–∏—Å–∫ ---
def search_service(query, threshold=0.45):
    query_embedding = model.encode(query, convert_to_tensor=True)
    cos_scores = util.pytorch_cos_sim(query_embedding, service_embeddings)[0]
    top_score = torch.max(cos_scores).item()
    top_idx = torch.argmax(cos_scores).item()

    if top_score >= threshold:
        service = services[top_idx]
        price = df.iloc[top_idx]["–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"]
        return {
            "match_found": True,
            "—É—Å–ª—É–≥–∞": service,
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å": f"{int(price)} —Ä—É–±.",
            "score": top_score
        }
    else:
        return {
            "match_found": False,
            "—Ç–∞–±–ª–∏—Ü–∞": df.to_dict(orient="records"),
            "score": top_score
        }

# --- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def log_interaction(query, result):
    with open("rag_log.txt", "a", encoding="utf-8") as log_file:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_file.write(f"[{timestamp}] –ó–∞–ø—Ä–æ—Å: {query}\n")
        if result["match_found"]:
            log_file.write(f"  –ù–∞–π–¥–µ–Ω–∞: {result['—É—Å–ª—É–≥–∞']} ‚Äî {result['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}, score={result['score']:.2f}\n")
        else:
            log_file.write(f"  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, score={result['score']:.2f}\n")
        log_file.write("-" * 40 + "\n")

# --- –û–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª ---
print(Fore.BLUE + "\nü§ñ –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã—Ö–æ–¥'.")

while True:
    query = input(Fore.WHITE + "\nüßë‚Äçüîß –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()
    if query.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
        print(Fore.MAGENTA + "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        break

    result = search_service(query)
    log_interaction(query, result)

    if result["match_found"]:
        print(Fore.GREEN + f"\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞: {result['—É—Å–ª—É–≥–∞']}")
        print(Fore.YELLOW + f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {result['—Å—Ç–æ–∏–º–æ—Å—Ç—å']}")
        print(Fore.CYAN + f"üìà –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å: {result['score']:.2f}")
    else:
        print(Fore.RED + "\n‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:")
        for row in result["—Ç–∞–±–ª–∏—Ü–∞"]:
            print(Fore.LIGHTBLACK_EX + f"- {row['–£—Å–ª—É–≥–∞']} ‚Äî {row['–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)']} —Ä—É–±.")
        print(Fore.CYAN + f"\nüìâ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å: {result['score']:.2f}")
