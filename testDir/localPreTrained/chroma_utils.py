import chromadb
from chromadb.config import Settings
from chromadb.utils.embedding_functions import OllamaEmbeddingFunction
import pandas as pd

collection_name = "services"
DB_PATH = "./chroma_db"
OLLAMA_URL = "http://localhost:12000"

embedding_fn = OllamaEmbeddingFunction(model_name="mxbai-embed-large:latest", url=OLLAMA_URL)
client = chromadb.PersistentClient(path=DB_PATH)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
def get_collection():
    try:
        return client.get_collection(name=collection_name, embedding_function=embedding_fn)
    except Exception:
        return client.create_collection(name=collection_name, embedding_function=embedding_fn)

# –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
def search_service(query: str, threshold: float = 0.45):
    collection = get_collection()
    results = collection.query(query_texts=[query], n_results=1)

    if results["distances"] and results["distances"][0][0] < threshold:
        doc = results["documents"][0][0]
        meta = results["metadatas"][0][0]
        score = results["distances"][0][0]
        return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ:\nüõ†Ô∏è –£—Å–ª—É–≥–∞: {doc}\nüí∞ –¶–µ–Ω–∞: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\nüìè –°—Ö–æ–¥—Å—Ç–≤–æ: {score:.2f}"
    else:
        all_data = collection.get()
        output = "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\n"
        for doc, meta in zip(all_data["documents"], all_data["metadatas"]):
            output += f" - {doc}: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
        return output

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
def load_services(csv_path="rag_services.csv"):
    df = pd.read_csv(csv_path)
    if df.empty:
        raise ValueError("CSV –ø—É—Å—Ç.")
    
    services = df["–£—Å–ª—É–≥–∞"].tolist()
    metadatas = [{"price": int(row["–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"])} for _, row in df.iterrows()]
    ids = [f"service_{i}" for i in range(len(services))]

    collection = get_collection()
    collection.add(documents=services, ids=ids, metadatas=metadatas)