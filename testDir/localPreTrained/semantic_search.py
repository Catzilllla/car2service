# import chromadb
# import pandas as pd
# from chromadb.utils.embedding_functions.ollama_embedding_function import OllamaEmbeddingFunction

# df = pd.read_csv("rag_services.csv")

# client = chromadb.Client()
# embedding_fn = OllamaEmbeddingFunction(model_name="mxbai-embed-large", url="http://localhost:11434")
# collection = client.get_or_create_collection("services", embedding_function=embedding_fn)

# def search_service(query: str, threshold: float = 0.45):
#     results = collection.query(query_texts=[query], n_results=1)

#     if not results["documents"] or not results["documents"][0]:
#         # –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏
#         all_docs = collection.get()["documents"]
#         return "üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n" + "\n".join([doc for doc in all_docs])

#     # –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#     matched_doc = results["documents"][0][0]
#     score = results["distances"][0][0]
    
#     if score > threshold:
#         return f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞:\n{matched_doc}\n(similarity: {score:.2f})"
#     else:
#         all_docs = collection.get()["documents"]
#         return f"‚ùó –ü–æ—Ö–æ–∂–∏—Ö —É—Å–ª—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (score={score:.2f}). –í–æ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫:\n" + "\n".join([doc for doc in all_docs])


# # –ü—Ä–∏–º–µ—Ä
# if __name__ == "__main__":
#     while True:
#         user_input = input("üîé –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥'): ")
#         if user_input.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
#             break
#         print(search_service(user_input))


import chromadb
from chromadb.config import Settings
from chromadb.utils.embedding_functions import OllamaEmbeddingFunction
from termcolor import colored

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –±–∞–∑–µ
client = chromadb.PersistentClient(path="./chroma_db")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
collection_name = "services"
embedding_fn = OllamaEmbeddingFunction(model_name="mxbai-embed-large:latest", url="http://localhost:11434")

try:
    collection = client.get_collection(name=collection_name, embedding_function=embedding_fn)
except Exception as e:
    print(colored(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}", "red"))
    exit(1)

# –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
def search_service(query: str, threshold: float = 0.45):
    results = collection.query(query_texts=[query], n_results=1)

    if results["distances"] and results["distances"][0] and results["distances"][0][0] < threshold:
        doc = results["documents"][0][0]
        meta = results["metadatas"][0][0]
        score = results["distances"][0][0]
        return colored(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {doc}\n–¶–µ–Ω–∞: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n–°—Ö–æ–¥—Å—Ç–≤–æ: {score:.2f}", "green")
    else:
        all_data = collection.get()
        output = colored("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n", "yellow")
        for doc, meta in zip(all_data["documents"], all_data["metadatas"]):
            output += f" - {doc}: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
        return output

# CLI
print(colored("üîé –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥'):", "cyan"))
while True:
    user_input = input(" > ").strip()
    if user_input.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
        break
    print(search_service(user_input))
